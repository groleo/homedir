#! /bin/bash

set_editor()
{
    export EDITOR=/usr/bin/vim
    export VISUAL=/usr/bin/vim
}
set_locales()
{
    export LANG="en_US.utf8"
    export LANGUAGE="en_US.utf8"
    export LC_CTYPE="en_US.utf8"
    export LC_NUMERIC="en_US.utf8"
    export LC_TIME="en_US.utf8"
    export LC_COLLATE="en_US.utf8"
    export LC_MONETARY="en_US.utf8"
    export LC_MESSAGES="en_US.utf8"
    export LC_PAPER="en_US.utf8"
    export LC_NAME="en_US.utf8"
    export LC_ADDRESS="en_US.utf8"
    export LC_TELEPHONE="en_US.utf8"
    export LC_MEASUREMENT="en_US.utf8"
    export LC_IDENTIFICATION="en_US.utf8"
    #export LC_ALL=en_US.UTF-8
}
set_path()
{
    EXTRA_PATH=${HOME}/.local/bin
    export PATH=${PATH##$EXTRA_PATH}
    export PATH=${EXTRA_PATH}:${PATH}
}
set_aliases()
{
    alias grep="grep --color=auto --exclude='*.orig' --exclude='tags' --exclude-dir='.hg' --exclude-dir='.git' --exclude-dir='out'"
    alias psg="ps -augxww | grep -v grep | grep -i"
    alias cd-="cd -"
    alias l1='ls -1'
    alias tmux='tmux -2 -u'
    alias vi=vim
    alias ls='ls --color'
    alias f=fg
    alias wk="cd ~/workspace/"
}
Cgrep()
{
    find . -iname '*.c' -o -iname '*.h' -o -iname '*.hpp' -o -iname '*.cpp' | xargs grep -n --color=always --exclude='*.orig' --exclude='tags' --exclude-dir='.hg' --exclude-dir='.git' --exclude-dir='out' $*
}
set_proxy()
{
    export http_proxy=""
    export HTTP_PROXY=$http_proxy
    export https_proxy=$http_proxy
    export HTTPS_PROXY=$https_proxy
    export no_proxy=localhost,.nxp.com,10.0.0.0/8
    export NO_PROXY=$no_proxy
}
unset_proxy()
{
    unset http_proxy
    unset HTTP_PROXY
    unset https_proxy
    unset HTTPS_PROXY
    unset no_proxy
    unset NO_PROXY
}
cmm()
{
    mm 2>&1 $* \
        | ack --flush --passthru --color --color-match=red "^.*: error.*" \
        | ack --flush --passthru --color --color-match=red "^.*: fatal error.*" \
        | ack --flush --passthru --color --color-match=yellow "^.*: warning:.*" \
        | ack --flush --passthru --color --color-match=red ".*undefined reference to*" \
        | ack --flush --passthru --color --color-match=red ".*No rule to make target.*" \
        | ack --flush --passthru --color --color-match=red ".*multiple definition of.*" | tee /tmp/log
            RV=${PIPESTATUS[0]}

            grep "Install:" /tmp/log > /tmp/install
            sed -e 's/Install:/c push/' -i /tmp/install
            mv /tmp/install .
            chmod +x install
            rm /tmp/log
            return $RV
        }

#
#  Utilitary functions
#
col()
{
    $* \
        | ack --flush --passthru --color --color-match=red "^.*: error.*" \
        | ack --flush --passthru --color --color-match=red "^.*: fatal error.*" \
        | ack --flush --passthru --color --color-match=yellow "^.*: warning:.*" \
        | ack --flush --passthru --color --color-match=red ".*undefined reference to*" \
        | ack --flush --passthru --color --color-match=red ".*No rule to make target.*" \
        | ack --flush --passthru --color --color-match=red ".*multiple definition of.*" | tee /tmp/log
            return ${PIPESTATUS[0]}
        }
    shgrep()
    {
        local d=${2:-.}
        find $d -type f \( -name CMakeLists.txt -o -name "Kconfig" -o -name '*.sh' -o -name '*.mk' -o -iname 'makefile*' -a ! -name '*.orig' \) -print0 | xargs -0 grep --color -n "$@"
    }
mkgrep()
{
    find . -type f \( -name 'Android*.mk' -a ! -name '*.orig' \) -print0 | xargs -0 grep --color -n "$@"
}
hgrep ()
{
    find . -name .repo -prune -o -name .git -prune -o -type f \(  -name '*.h' \) -print0 | xargs -0 grep --color -n "$@"
}

set_ccache()
{
    export CCACHE_DIR=/compile-cache/ccache/
    ccache -o run_second_cpp="true" -o sloppiness="time_macros,include_file_mtime,file_macro"
    ccache -M 30G > /dev/null
}
EXT_COLOR()
{
    echo -ne "\[\033[38;5;$1m\]";
}
set_history()
{
    HISTCONTROL="ignoredups:erasedups:ignorespace"
    HISTSIZE=104857600
    HISTFILESIZE=104857600
    LAST_HISTORY_WRITE=$SECONDS
}

prompt_command() {
    #if [ $(($SECONDS - $LAST_HISTORY_WRITE)) -gt 60 ]; then
    history -a && history -c && history -r
    #LAST_HISTORY_WRITE=$SECONDS
    #fi
}

set_git_prompt() {
    PROMPT_COMMAND="prompt_command"
    export HISTCONTROL HISTSIZE HISTFILESIZE PROMPT_COMMAND
    shopt -s histappend
    shopt -s checkwinsize

    export GIT_PS1_SHOWDIRTYSTATE=1
    export GIT_PS1_SHOWSTASHSTATE=1
    export GIT_PS1_SHOWUNTRACKEDFILES=1

    [[ -s /etc/profile.d/autojump.sh ]] && source /etc/profile.d/autojump.sh
    [[ -s /usr/share/autojump/autojump.bash ]] && source /usr/share/autojump/autojump.bash

    _extra_git='X'
    #Debian
    if [ -f /etc/bash_completion.d/git-prompt ] ; then
        source /etc/bash_completion.d/git-prompt
        _extra_git='[$(__git_ps1 "%s")]'
    fi
    if [ -f /etc/bash_completion.d/git ]; then
        source /etc/bash_completion.d/git
        _extra_git='[$(__git_ps1 "%s")]'
    fi

    # Fedora
    if [ -f /usr/share/git-core/contrib/completion/git-prompt.sh ]; then
        source /usr/share/git-core/contrib/completion/git-prompt.sh
        _extra_git='[$(__git_ps1 "%s")]'
    fi
}


set_ps1() {
    export PROMPT_DIRTRIM=2
    export PROMPT_COMMAND="$PROMPT_COMMAND;pwd>/tmp/pwd"
    separator=$(printf "\[\033[48;5;52m\]%${COLUMNS}s\[\033[0m\]")
    #separator=$(perl -e "print '_'x${COLUMNS}")
    #export PS1='\j--'${OLDPWD}${separator}'\n\[\033[01;32m\]\u@\h\[\033[01;31m\]'$_extra_git'$(__android_extra)\[\033[01;33m\]\W \$ \e[0m'
    # Non-printable sequences should be enclosed in \[ \]
    #export PS1="${separator}\n\[\033[01;30m\]\u@\h\[\033[01;31m\]"$_extra_git'\[\033[01;31m\]\W\[\033[48;5;52m\]\j\[\033[0m\]\$\[\033[0m\] '
    export PS1="${separator}\n\[\033[01;33m\]\u@\h\[\033[01;31m\]"$_extra_git"\[\033[01;31m\]\W\[\033[48;5;52m\]\j\[\033[0m\]\$\[\033[0m\] "
    [ -n "$SCHROOT_CHROOT_NAME" ] && export PS1="${PS1}+ "
}

case "$-" in
    *i*)
    bind -x '"\eOP":" fg&>/dev/null"'
    set bell-style none
esac

export TERMINFO=${HOME}/.local/terminfo

#use ctl keys to move forward and back in words
if [[ "${SHELLOPTS}" =~ :(emacs|vi): ]] ; then
    bind '"\eOC":forward-word'
    bind '"\eOD":backward-word'
fi
#bind '"\e\e[C": forward-word'
#bind '"\e\e[D": backward-word'
#bind '"\e[D":backward-word'
# mappings for Ctrl-left-arrow and Ctrl-right-arrow for word moving
#"\e[1;5C": forward-word
#"\e[1;5D": backward-word

#"\e[5C": forward-word
#"\e[5D": backward-word

set_history
set_editor
set_locales
set_path
set_aliases
#set_proxy
#set_display
#set_ccache
set_git_prompt
set_ps1

_workjump() {
        local cur
        cur=workspace/${COMP_WORDS[*]:1}
        comps=$(autojump --complete $cur)
        while read i; do
            COMPREPLY=("${COMPREPLY[@]}" "${i}")
        done <<EOF
        $comps
EOF
}
work() {
    j $*
}
complete -F _workjump work
